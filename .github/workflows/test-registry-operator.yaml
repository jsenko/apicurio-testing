name: Release Tests - Apicurio Registry Operator
on:
  workflow_dispatch:
    inputs:
      release-version:
        description: Released version to test
        required: true
      operatorImage:
        description: Operator image to test (optional)
        required: false
      appImage:
        description: Application image to test (optional)
        required: false
      uiImage:
        description: UI image to test (optional)
        required: false
      tests-tag:
        description: git tag to use for running tests
        required: true
        default: main
      isDownstream:
        type: boolean
        description: Test downstream images
        required: true
        default: false
      skipClusterInstall:
        type: boolean
        description: Skip cluster install
        required: true
        default: false
      cluster-name:
        description: >-
          Name of a cluster that will be created, or if the cluster installation is skipped, 
          name of the existing cluster to use.
        required: true
        default: ci419

env:
  APICURIO_REGISTRY_VERSION: ${{ github.event.inputs.release-version }}
  APP_IMAGE: ${{ github.event.inputs.appImage }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_DEFAULT_REGION: "us-east-1"
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  CLUSTER_NAME: ${{ inputs.cluster-name }}
  COMPUTE_NODES: 2 # TODO: Increase if needed.
  CONTROL_PLANE_NODES: 3
  DOCKER_EMAIL: ${{ secrets.DOCKER_EMAIL }}
  DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
  DOCKER_SERVER: ${{ secrets.DOCKER_SERVER }}
  DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
  OPENSHIFT_PULL_SECRET: ${{ secrets.OPENSHIFT_PULL_SECRET }}
  OPENSHIFT_VERSION: "4.19"
  OPERATOR_IMAGE: ${{ github.event.inputs.operatorImage }}
  SSH_PUBLIC_KEY: ${{ secrets.SSH_PUBLIC_KEY }}
  UI_IMAGE: ${{ github.event.inputs.uiImage }}

jobs:

  record-start-time:
    runs-on: ubuntu-latest
    outputs:
      start-time: ${{ steps.get-start-time.outputs.start-time }}
    steps:

      - name: Get Workflow Start Time
        id: get-start-time
        run: |
          START_TIME=$(date -u +%Y-%m-%dT%H:%M:%SZ)
          echo "start-time=$START_TIME" >> $GITHUB_OUTPUT
          echo "Workflow start time: $START_TIME"

  os419:
    name: OpenShift 4.19
    runs-on: ubuntu-latest
    timeout-minutes: 90
    needs: record-start-time
    if: |
      !cancelled() && needs.record-start-time.result == 'success' && !inputs.skipClusterInstall

    steps:

      - name: Check Required tools
        run: |
          curl --version
          jq --version
          git --version

      - name: Checkout $({{ github.ref }})
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.ACCESS_TOKEN }}

      - name: Configure Git
        run: |
          git config user.name "apicurio-ci"
          git config user.email "apicurio.ci@gmail.com"
          git config pull.rebase true

      - name: Load test cache
        run: |
          ./load-cache.sh --token "${{ secrets.ACCESS_TOKEN }}"

      - name: Install OpenShift cluster
        run: |
          ./install-cluster.sh --cluster $CLUSTER_NAME \
              --okdVersion $OPENSHIFT_VERSION \
              --controlPlaneNodes $CONTROL_PLANE_NODES \
              --computeNodes $COMPUTE_NODES \
              --log-level warn

      - name: Install OpenShift Docker Pull Credentials
        run: |
          ./configure-pull-secret.sh --cluster $CLUSTER_NAME

      - name: Install Apicurio Registry Operator
        run: |
          ./install-apicurio-operator.sh --cluster $CLUSTER_NAME \
              --version $APICURIO_REGISTRY_VERSION \
              --operatorImage "$OPERATOR_IMAGE" \
              --appImage "$APP_IMAGE" \
              --uiImage "$UI_IMAGE"

      - name: Save cluster state
        uses: ./.github/actions/save-cluster-state
        if: always()

  os419_operator:
    name: Apicurio Registry Operator
    runs-on: ubuntu-latest
    # timeout-minutes: 30
    needs:
      - os419
    if: |
      !cancelled() && (needs.os419.result == 'success' || needs.os419.result == 'skipped')

    steps:

      - name: Checkout ${{ github.ref }}
        uses: actions/checkout@v4

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Restore cluster state
        uses: ./.github/actions/restore-cluster-state
        with:
          github-token: ${{ secrets.ACCESS_TOKEN }}

      - name: Configure env. variables
        # TODO: Do this by the restore action.
        run: |
          echo "WORKSPACE=$PWD" >> $GITHUB_ENV
          echo "KUBECONFIG=$PWD/cache/clusters/$CLUSTER_NAME/auth/kubeconfig" >> $GITHUB_ENV

      - name: Configure operator install file
        run: |
          ./configure-apicurio-operator-install-file.sh --cluster $CLUSTER_NAME \
            --version $APICURIO_REGISTRY_VERSION \
            --namespace PLACEHOLDER_NAMESPACE \
            --operatorImage "$OPERATOR_IMAGE" \
            --appImage "$APP_IMAGE" \
            --uiImage "$UI_IMAGE"

      - name: Checkout Registry
        run: |
          echo "Cloning apicurio-registry git repository at branch/tag: ${{ inputs.tests-tag }}"
          if [ -d "apicurio-registry" ]; then
            echo "Repository already exists, removing and re-cloning..."
            rm -rf apicurio-registry
          fi
          git clone --branch ${{ inputs.tests-tag }} --depth 1 https://github.com/Apicurio/apicurio-registry.git

      - name: Extract Ingress host
        # TODO: Also do this by the restore action, or add it to the operator Makefile.
        run: |
          CONTEXT_NAME=$(kubectl config view -o json | jq -r '.["current-context"]')
          CLUSTER_NAME=$(kubectl config view -o json | jq -r --arg context_name "$CONTEXT_NAME" '.contexts[] | select(.name == $context_name) | .context.cluster')
          CLUSTER_API_URL=$(kubectl config view -o json | jq -r --arg cluster_name "$CLUSTER_NAME" '.clusters[] | select(.name == $cluster_name) | .cluster.server')
          INGRESS_HOST=$(echo $CLUSTER_API_URL | sed 's|.*://api\.\(.*\):.*|apps.\1|')
          echo "INGRESS_HOST=$INGRESS_HOST" >> $GITHUB_ENV

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: temurin
          cache: maven
          cache-dependency-path: apicurio-registry/operator/controller/pom.xml

      - name: Run remote and OLM v1 tests on Minikube
        working-directory: apicurio-registry/operator
        run: |
          # TODO: Also run OLM tests
          #   CATALOG_IMAGE=TODO
          #   make BUILD_OPTS="--no-transfer-progress -Dtest.operator.olm-version=0" test-remote-all
          mvn --no-transfer-progress verify -pl controller -am -DskipOperatorTests=false \
            -Dtest.operator.deployment-type=remote \
            -Dtest.operator.install-file=$WORKSPACE/templates/registry-operator/$APICURIO_REGISTRY_VERSION/apicurio-registry-operator-configured.yaml \
            -Dtest.operator.ingress-host=$INGRESS_HOST

  os419_teardown:
    name: Destroy OpenShift 4.19
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs:
      - os419_operator
    if: |
      !cancelled() && !inputs.skipClusterInstall

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Restore cluster state
        uses: ./.github/actions/restore-cluster-state
        with:
          github-token: ${{ secrets.ACCESS_TOKEN }}

      - name: Destroy OpenShift cluster
        run: |
          ./destroy-cluster.sh --cluster $CLUSTER_NAME

      - name: Cleanup cluster state
        uses: ./.github/actions/cleanup-cluster-state

  save_workflow_metadata:
    name: Save Workflow Metadata
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs:
      - record-start-time
      - os419_teardown
    if: |
      !cancelled() && needs.record-start-time.result == 'success'
    steps:

      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Log Workflow Start Time
        run: |
          echo "Workflow Start Time: ${{ needs.record-start-time.outputs.start-time }}"

      - name: Commit workflow metadata to repository
        uses: ./.github/actions/commit-workflow-metadata
        with:
          workflow-start-time: ${{ needs.record-start-time.outputs.start-time }}
          github-token: ${{ secrets.ACCESS_TOKEN }}
